name: Build and Push Grocy Container Image

on:
  workflow_call:
    inputs:
      grocy_version:
        description: "Grocy major.minor version to build (e.g. 3.9 or 4.1)"
        type: string
        required: true
      base_image:
        description: "The base image to build and publish on."
        type: string
        required: true
      tag_major_minor:
        description: "Assign {major}.{minor} tags to the image. (e.g. :3.9 or :4.1)"
        type: boolean
        required: true
      tag_latest:
        description: "Assign `:latest` tag to the image."
        type: boolean
        required: true
  workflow_dispatch:
    inputs:
      grocy_version:
        description: "Grocy major.minor version to build (e.g. 3.9 or 4.1)"
        type: string
        default: "4.1"
      base_image:
        description: "The base image to build and publish on."
        type: string
        default: "docker.io/php:8.3-fpm-alpine"
      tag_major_minor:
        description: "Assign {major} and {major}.{minor} tags to the image. (e.g. :3.9 or :4.1)"
        type: boolean
        default: true
      tag_latest:
        description: "Assign `:latest` tag to the image."
        type: boolean
        default: false

jobs:
  build-push:
    name: Build and push the Grocy container image to the GHCR and Docker Hub
    env:
      IMAGE_GHCR: ghcr.io/${{ github.repository_owner }}/grocy
      GROCY_VERSION:
      TAGS:
    runs-on: ubuntu-latest
    steps:
      - name: Set GROCY_VERSION
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          GROCY_VERSION=$(gh api repos/grocy/grocy/releases --jq 'map(select(.draft==false and .prerelease==false and (.tag_name | startswith("v${{ inputs.grocy_version }}"))).tag_name[1:])|max')
          [ -n "${GROCY_VERSION}" ] && echo "GROCY_VERSION=${GROCY_VERSION}" >> $GITHUB_ENV
      - name: Set TAGS
        env:
          TAGS: >-
            ${{ env.IMAGE_GHCR }}:${{ env.GROCY_VERSION }}
        run: |
          echo "TAGS=${{ env.TAGS }}" >> $GITHUB_ENV
      - name: Add :{major}.{minor} tags
        if: inputs.tag_major_minor == true
        env:
          TAGS_MAJOR_MINOR: >-
            ${{ env.IMAGE_GHCR }}:${{ inputs.GROCY_VERSION }}
        run: |
          echo "TAGS=${{ env.TAGS }} ${{ env.TAGS_MAJOR_MINOR }}" >> $GITHUB_ENV
      - name: Add :latest tag
        if: inputs.tag_latest == true
        env:
          TAGS_LATEST: >-
            ${{ env.IMAGE_GHCR }}:latest
        run: |
          echo "TAGS=${{ env.TAGS }} ${{ env.TAGS_LATEST }}" >> $GITHUB_ENV
      - name: Format TAGS as CSV
        run: |
          echo "TAGS=$(echo ${{ env.TAGS }} | tr ' ' ',')" >> $GITHUB_ENV
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          platforms: linux/amd64,linux/arm64
          pull: true
          push: true
          tags: ${{ env.TAGS }}
          cache-from: type=gha,scope=grocy-${{ env.GROCY_VERSION }}
          cache-to: type=gha,scope=grocy-${{ env.GROCY_VERSION }},mode=max
          build-args: |
            GROCY_VERSION=${{ env.GROCY_VERSION }}
            BASE_IMAGE=${{ inputs.base_image }}
          # Attestation metadata causes a new image digest on each run
          provenance: false
          sbom: false
